// THIS FILE IS GENERATED. EDITING IS FUTILE.
//
// Generated by "thema lineage gen" from lineage defined in example.cue

package main

import (
	"embed"
	"io/fs"

	"cuelang.org/go/cue/build"
	"github.com/grafana/thema"
	"github.com/grafana/thema/load"
)

// Lineage returns a [thema.Lineage] for the 'example' lineage.
//
// The lineage is the canonical specification of example. It contains
// all versions of the Thema schema that have ever existed for example,
// and the lenses that allow valid instances of one schema in the lineage to
// be translated to another version of schema in the lineage.
//
// This function will return an error if the [Thema invariants] are not met by
// the lineage.
//
// [Thema's general invariants]: https://github.com/grafana/thema/blob/main/docs/invariants.md
func Lineage(rt *thema.Runtime, opts ...thema.BindOption) (thema.Lineage, error) {
	// First, we must get the bytes of the .cue file(s) in which the "example" lineage
	// is declared, and load them into a
	// "cuelang.org/go/cue/build".Instance.
	//
	// For most Thema-based development workflows, these bytes should come from an embed.FS.
	// This ensures Go is always compiled with the current state of the .cue files.
	var inst *build.Instance
	var err error

	// This prepares the .cue file in which the example lineage is declared for
	// runtime use by the CUE evaluator.
	inst, err = loadInstanceForexample()
	if err != nil {
		// Errors at this point indicate a problem with basic loading of .cue file bytes,
		// which typically means the code generator was misconfigured and a path input
		// is incorrect.
		return nil, err
	}

	raw := rt.Context().BuildInstance(inst)

	// An error returned from thema.BindLineage indicates one of the following:
	//   - The parsed path does not exist in the loaded CUE file (["github.com/grafana/thema/errors".ErrValueNotExist])
	//   - The value at the parsed path exists, but does not appear to be a Thema
	//     lineage (["github.com/grafana/thema/errors".ErrValueNotALineage])
	//   - The value at the parsed path exists and is a lineage (["github.com/grafana/thema/errors".ErrInvalidLineage]),
	//     but is invalid due to the violation of some general Thema invariant -
	//     for example, declared schemas don't follow backwards compatibility rules,
	//     lenses are incomplete.
	return thema.BindLineage(raw, rt, opts...)
}

// type guards

var _ thema.LineageFactory = Lineage

//go:embed example.cue
var themaFSForexample embed.FS

func getThemaFSForexample() fs.FS {
	return load.AsModFS(themaFSForexample, "main")
}

func loadInstanceForexample() (*build.Instance, error) {
	return load.InstanceWithThema(getThemaFSForexample(), ".")
}
